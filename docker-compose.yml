# TODO: Credentials container is required by sync-api. Do we need it?
# TODO: Ports for the sync-api

services:
  # credentials:
  #   container_name: credentials
  #   command:
  #     - "/bin/sh"
  #     - "/scripts/make_sda_credentials.sh"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   environment:
  #     - PGPASSWORD=rootpasswd
  #   image: python:3.10-slim
  #   volumes:
  #     - ./scripts:/scripts
  #     - shared:/shared
  postgres:
    profiles: ["sda-sweden"]
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=rootpasswd
      # - DB_SSLMODE=disable
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 2s
      retries: 6
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}-postgres
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data

  rabbitmq:
    profiles: ["sda-sweden"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}-rabbitmq
    container_name: rabbitmq
    environment:
     - CEGA_CONNECTION=amqp://test:test@cegamq:5672/lega
     - RABBITMQ_DEFAULT_PASS=test
     - RABBITMQ_DEFAULT_USER=test
     - MQ_VHOST=sda
     # - NOTLS=true
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: [ "CMD", "bash", "-c", "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"]
      interval: 5s
      timeout: 120s
      retries: 10

  s3:
    profiles: ["sda-sweden"]
    command: server /data --console-address ":9001"
    container_name: s3
    environment:
      - MINIO_ROOT_USER=access
      - MINIO_ROOT_PASSWORD=secretkey
      - MINIO_SERVER_URL=http://127.0.0.1:9000
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-fqI",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 5s
      timeout: 20s
      retries: 10
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"

  createbucket:
    profiles: ["sda-sweden"]
    image: minio/mc
    container_name: mc
    depends_on:
      s3:
        condition: service_started
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc -q config host add s3 http://s3:9000 access secretkey;
      /usr/bin/mc -q mb s3/inbox || true;
      /usr/bin/mc -q mb s3/archive || true;
      /usr/bin/mc -q mb s3/backup || true;
      exit 0;
      "

  s3inbox:
    profiles: ["sda-sweden"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-s3inbox ]
    container_name: s3inbox
    depends_on:
      cegamq:
        condition: service_healthy
      s3:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: always
    environment:
      - LOG_LEVEL=debug
      - INBOX_URL=http://s3
      - INBOX_ACCESSKEY=access
      - INBOX_SECRETKEY=secretkey
      - INBOX_BUCKET=inbox
      - INBOX_REGION=us-east-1
      - INBOX_READYPATH=/minio/health/ready
      #- INBOX_CACERT=/certs/ca.crt
      - BROKER_HOST=cegamq
      - BROKER_USER=test
      - BROKER_PASSWORD=test
      - BROKER_PORT=5672
      - BROKER_VHOST=lega
      - BROKER_EXCHANGE=localega.v1
      - BROKER_ROUTINGKEY=inbox
      - BROKER_SSL=false
      #- BROKER_CACERT=/certs/ca.crt
      - BROKER_CLIENTCERT=/certs/client.crt
      - BROKER_CLIENTKEY=/certs/client.key
      - BROKER_VERIFYPEER=false
      - DB_PASSWORD=rootpasswd
      - DB_USER=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_SSLMODE=disable
      #- SERVER_CERT=/certs/proxy.crt
      #- SERVER_KEY=/certs/proxy.key
      - SERVER_JWTPUBKEYPATH=/keys/
      - SERVER_JWTPUBKEYURL=https://login.elixir-czech.org/oidc/jwk
      - LOG_FORMAT=json
    volumes:
      - ./config.yaml:/config.yaml
      #- proxy_certs:/certs
      - ./keys:/keys
    ports:
      - "8000:8000"
      - "8001:8001"

  ingest:
    profiles: ["sda-sweden"]
    container_name: ingest
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      s3:
        condition: service_started
      bootstrap:
        condition: service_started
    environment:
      - ARCHIVE_TYPE=s3
      - ARCHIVE_URL=http://s3
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmq
      - BROKER_QUEUE=ingest
      - BROKER_ROUTINGKEY=archived
      - BROKER_ROUTINGERROR=error
      - DB_HOST=postgres
      - INBOX_TYPE=s3
      - INBOX_URL=http://s3
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-ingest ]
    volumes:
      - ./config.yaml:/config.yaml
      - keys:/keys
      - archive:/tmp
    restart: always

  verify:
    profiles: ["sda-sweden"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-verify ]
    container_name: verify
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      s3:
        condition: service_started
    environment:
      - ARCHIVE_URL=http://s3
      - ARCHIVE_TYPE=s3
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmq
      - BROKER_QUEUE=archived
      - BROKER_ROUTINGKEY=verified
      - BROKER_ROUTINGERROR=error
      - DB_HOST=postgres
      - INBOX_TYPE=s3
      - INBOX_URL=http://s3
    volumes:
      - ./config.yaml:/config.yaml
      - keys:/keys
      - archive:/tmp
    restart: always

  finalize:
    profiles: ["sda-sweden"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-finalize ]
    container_name: finalize
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmq
      - BROKER_QUEUE=accession
      - BROKER_ROUTINGKEY=completed
      - BROKER_ROUTINGERROR=error
      - DB_HOST=postgres
    volumes:
      - ./config.yaml:/config.yaml
      - keys:/keys
    restart: always

  sync:
    profiles: ["sda-sweden"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-sync ]
    container_name: sync
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      s3:
        condition: service_started
    environment:
      - ARCHIVE_TYPE=s3
      - ARCHIVE_URL=http://s3
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmq
      - BROKER_QUEUE=mapping_stream
      - DB_HOST=postgres
    volumes:
      - ./config.yaml:/config.yaml
      - keys:/keys
      - archive:/tmp
    restart: always

  sync-api:
    profiles: ["sda-sweden"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-syncapi ]
    container_name: sync-api
    depends_on:
      # credentials:
      #   condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    environment:
      - BROKER_EXCHANGE=sda.dead
    ports:
      - "18080:8080"
    restart: always
    volumes:
      - ./config.yaml:/config.yaml

  mapper:
    profiles: ["sda-sweden"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-mapper ]
    container_name: mapper
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmq
      - BROKER_QUEUE=mappings
      - BROKER_ROUTINGERROR=error
      - DB_HOST=postgres
    volumes:
      - ./config.yaml:/config.yaml
      - keys:/keys
    restart: always

  interceptor:
    profiles: ["sda-sweden"]
    container_name: interceptor
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: sda-intercept
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      #- BROKER_EXCHANGE=lega
      - BROKER_HOST=rabbitmq
      - BROKER_QUEUE=from_cega
      - BROKER_ROUTINGKEY=ingest
      - BROKER_ROUTINGERROR=error
    volumes:
      - ./config.yaml:/config.yaml
      - keys:/keys
    restart: always

  bootstrap:
    profiles: ["sda-sweden"]
    depends_on:
      createbucket:
        condition: service_completed_successfully
    command: sh -c /bin/bootstrap.sh -p /keys/c4gh.pub
    container_name: bs
    image: neicnordic/sda-helm-tests-support:latest
    user: 0:0
    volumes:
      - $PWD/scripts/bootstrap.sh:/bin/bootstrap.sh
      - keys:/keys

  cegamq:
    profiles: ["sda-sweden"]
    container_name: cegamq
    image: rabbitmq:3.11.2-management-alpine
    environment:
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/conf/cega
      - RABBITMQ_ENABLED_PLUGINS_FILE=/etc/rabbitmq/conf/cega.plugins
    ports:
      - "15673:15671"
    volumes:
      - ./mock-cega:/etc/rabbitmq/conf
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"
        ]
      interval: 5s
      timeout: 120s
      retries: 10

  mockcega:
    profiles: ["sda-sweden"]
    container_name: moce
    depends_on:
      cegamq:
        condition: service_healthy
    build:
      dockerfile: ./mock-cega/Dockerfile
    image: mock-cega

# Finnish implementation
  postgresfin:
    profiles: ["sda-finland"]
    container_name: postgresfin
    environment:
      - POSTGRES_PASSWORD=rootpasswd
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 2s
      retries: 6
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}-postgres
    ports:
      - "5431:5432"
    volumes:
      - dbdatafin:/var/lib/postgresql/data

  rabbitmqfin:
    profiles: ["sda-finland"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}-rabbitmq
    container_name: rabbitmqfin
    environment:
     - CEGA_CONNECTION=amqp://test:test@cegamqfin:5672/lega
     - RABBITMQ_DEFAULT_PASS=test
     - RABBITMQ_DEFAULT_USER=test
     - MQ_VHOST=sda
     - NOTLS=true
    ports:
      - "15674:15672"
      - "5674:5672"
    healthcheck:
      test: [ "CMD", "bash", "-c", "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"]
      interval: 5s
      timeout: 120s
      retries: 10

  s3fin:
    profiles: ["sda-finland"]
    command: server /data --console-address ":9001"
    container_name: s3fin
    environment:
      - MINIO_ROOT_USER=access
      - MINIO_ROOT_PASSWORD=secretkey
      - MINIO_SERVER_URL=http://127.0.0.1:9000
    healthcheck:
      test: ["CMD", "curl", "-fq", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 20s
      retries: 3
    image: minio/minio
    ports:
      - "9003:9000"
      - "9004:9001"

  createbucketfin:
    profiles: ["sda-finland"]
    image: minio/mc
    container_name: mcfin
    depends_on:
      s3fin:
        condition: service_started
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc -q config host add s3 http://s3fin:9000 access secretkey;
      /usr/bin/mc -q mb s3/inbox || true;
      /usr/bin/mc -q mb s3/archive || true;
      /usr/bin/mc -q mb s3/sync || true;
      exit 0;
      "

  ingestfin:
    profiles: ["sda-finland"]
    container_name: ingestfin
    depends_on:
      postgresfin:
        condition: service_started
      rabbitmqfin:
        condition: service_healthy
      s3fin:
       condition: service_started
      bootstrapfin:
        condition: service_started
    environment:
      - ARCHIVE_TYPE=s3
      - ARCHIVE_URL=http://s3fin
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmqfin
      - BROKER_QUEUE=ingest
      - BROKER_ROUTINGKEY=archived
      - BROKER_ROUTINGERROR=error
      - DB_HOST=postgresfin
      - INBOX_TYPE=s3
      - INBOX_URL=http://s3fin
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-ingest ]
    volumes:
      - ./configfin.yaml:/config.yaml
      - keys:/keys
      - archivefin:/tmp
    restart: always

  verifyfin:
    profiles: ["sda-finland"]
    command: sda-verify
    container_name: verifyfin
    depends_on:
      postgresfin:
        condition: service_started
      rabbitmqfin:
        condition: service_healthy
      s3fin:
        condition: service_started
    environment:
      - ARCHIVE_URL=http://s3fin
      - ARCHIVE_TYPE=s3
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmqfin
      - BROKER_QUEUE=archived
      - BROKER_ROUTINGKEY=verified
      - BROKER_ROUTINGERROR=error
      - DB_HOST=postgresfin
      - INBOX_TYPE=s3
      - INBOX_URL=http://s3fin
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    volumes:
      - ./configfin.yaml:/config.yaml
      - keys:/keys
      - archivefin:/tmp
    restart: always

  finalizefin:
    profiles: ["sda-finland"]
    command: sda-finalize
    container_name: finalizefin
    depends_on:
      postgresfin:
        condition: service_started
      rabbitmqfin:
        condition: service_healthy
    environment:
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmqfin
      - BROKER_QUEUE=accession
      - BROKER_ROUTINGKEY=completed
      - BROKER_ROUTINGERROR=error
      - DB_HOST=postgresfin
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    volumes:
      - ./configfin.yaml:/config.yaml
      - keys:/keys
    restart: always

  syncfin:
    profiles: ["sda-finland"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-sync ]
    container_name: syncfin
    depends_on:
      postgresfin:
        condition: service_started
      rabbitmqfin:
        condition: service_healthy
      s3fin:
        condition: service_started
    environment:
      - ARCHIVE_TYPE=s3
      - ARCHIVE_URL=http://s3fin
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmqfin
      - BROKER_QUEUE=mapping_stream
      - DB_HOST=postgresfin
    volumes:
      - ./configfin.yaml:/config.yaml
      - keys:/keys
      - archivefin:/tmp
    restart: always

  sync-apifin:
    profiles: ["sda-finland"]
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    command: [ sda-syncapi ]
    container_name: sync-apifin
    depends_on:
      # credentials:
      #   condition: service_completed_successfully
      rabbitmqfin:
        condition: service_healthy
    environment:
      - BROKER_EXCHANGE=sda.dead
    ports:
      - "8090:8080"
    restart: always
    volumes:
      - ./configfin.yaml:/config.yaml

  mapperfin:
    profiles: ["sda-finland"]
    command: sda-mapper
    container_name: mapperfin
    depends_on:
      postgresfin:
        condition: service_started
      rabbitmqfin:
        condition: service_healthy
    environment:
      - BROKER_EXCHANGE=sda
      - BROKER_HOST=rabbitmqfin
      - BROKER_QUEUE=mappings
      - BROKER_ROUTINGERROR=error
      - DB_HOST=postgresfin
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    volumes:
      - ./configfin.yaml:/config.yaml
      - keys:/keys
    restart: always

  interceptorfin:
    profiles: ["sda-finland"]
    command: sda-intercept
    container_name: interceptorfin
    depends_on:
      rabbitmqfin:
        condition: service_healthy
    environment:
      # - BROKER_EXCHANGE=lega
      - BROKER_HOST=rabbitmqfin
      - BROKER_QUEUE=from_cega
      - BROKER_ROUTINGKEY=ingest
      - BROKER_ROUTINGERROR=error
    image: ghcr.io/neicnordic/sensitive-data-archive:PR${PR_NUMBER}
    volumes:
      - ./configfin.yaml:/config.yaml
      - keys:/keys
    restart: always

  bootstrapfin:
    profiles: ["sda-finland"]
    # depends_on:
      #createbucketfin:
      #  condition: service_completed_successfully
    command: sh -c /bin/bootstrap.sh -p /keys/c4gh.pub
    container_name: bsfin
    image: neicnordic/sda-helm-tests-support:latest
    user: 0:0
    volumes:
      - $PWD/scripts/bootstrap.sh:/bin/bootstrap.sh
      - keys:/keys
  
  cegamqfin:
    profiles: ["sda-finland"]
    container_name: cegamqfin
    image: rabbitmq:3.11.2-management-alpine
    environment:
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/conf/cega
      - RABBITMQ_ENABLED_PLUGINS_FILE=/etc/rabbitmq/conf/cega.plugins
    ports:
      - "15675:15671"
    volumes:
      - ./mock-cegafin:/etc/rabbitmq/conf
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"
        ]
      interval: 5s
      timeout: 20s
      retries: 3
  
  mockcegafin:
    profiles: ["sda-finland"]
    container_name: mocefin
    depends_on:
      cegamqfin:
        condition: service_healthy
    build:
      dockerfile: ./mock-cegafin/Dockerfile
    image: mock-cegafin

volumes:
  keys:
  archivefin:
  backupfin:
  dbdatafin:
  uploadsfin:
  archive:
  backup:
  dbdata:
